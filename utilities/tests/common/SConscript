import os
from pathlib import Path as path

ROOT = "../.."

#targets = ['fixed', 'float', 'qemu']

use_gdb = int(ARGUMENTS.get('gdb', 0))
legacy = int(ARGUMENTS.get('legacy', 1))
debug_lvl = int(ARGUMENTS.get('debug_lvl', 1))
#cross_compile = options.get('NMC_CROSS_COMPILE') or 'nmc-')

dump_builder = Builder(action = 'nmc-objdump -d -s -x -l $SOURCE > $TARGET', suffix = '.dump', src_suffix = '.o')

# get environment and set variables
nmc_mc12101 = Environment(tools=['g++', 'gcc','gnulink', 'as'])
nmc_mc12101['BUILDERS']['Dump'] = dump_builder
#nmc_mc12101.Clean(dump_builder)

#nmc_mc12101['ENV']['PATH'] = os.environ['PATH']
#NMC_GCC_TOOLPATH = 'd:\\download\\NMC_Mingw'
NMC_GCC_TOOLPATH = os.environ['NMC_GCC_TOOLPATH']
MC12101 = os.environ['MC12101']
NMPP = os.environ['NMPP']
HAL = os.environ['HAL']
ARCH = 'nmc4'

nmc_mc12101['ROOT'] = ROOT
nmc_mc12101['NMC_GCC_TOOLPATH'] = NMC_GCC_TOOLPATH
nmc_mc12101['NMPP'] = NMPP
nmc_mc12101['HAL'] = HAL
nmc_mc12101['MC12101'] = MC12101
nmc_mc12101['ARCH'] = ARCH

nmc_mc12101.PrependENVPath('PATH', f'{MC12101}/bin')

if nmc_mc12101['PLATFORM'] == 'win32':
	gcc_exec_prefix = f"/cygdrive/{NMC_GCC_TOOLPATH}/nmc4-ide/lib/gcc/".replace(":","")
	gcc_exec_prefix = gcc_exec_prefix.replace("\\","/")
	nmc_mc12101['ENV']['GCC_EXEC_PREFIX'] = gcc_exec_prefix
	nmc_mc12101.PrependENVPath('PATH', f'{NMC_GCC_TOOLPATH}/nmc4-ide/bin')
	nmc_mc12101.PrependENVPath('PATH', f'{NMC_GCC_TOOLPATH}/nmc4-ide/lib')	
	nmc_mc12101.PrependENVPath('PATH', f'{NMC_GCC_TOOLPATH}/nmc4-ide/bin')


# assembler
#nmc_mc12101['AS'] = 'nmc-as'
#nmc_mc12101['ASFLAGS'] = ['-q', '-split_sir', f'-{ARCH}_{CORE}', '-ga']
nmc_mc12101['AS'] = 'nmc-gcc'
nmc_mc12101['ASFLAGS'] = ['-c', '-mmas', '-m$ARCH', '-g']

# compiler
nmc_mc12101['CC'] = 'nmc-gcc'
nmc_mc12101['CXX'] = 'nmc-g++'
nmc_mc12101['CFLAGS'] = Split('-std=c99')
nmc_mc12101['CXXFLAGS'] = Split('-std=c++11')
nmc_mc12101['CCFLAGS'] = Split('-m$ARCH -O0 -g')
nmc_mc12101['CPPPATH'] = Split(f'$MC12101/include $NMPP/include $ROOT/include $ROOT/../include' )
nmc_mc12101['CPPDEFINES'] = [f'DEBUG_LEVEL={debug_lvl}']
nmc_mc12101['CPPPATH'] += [f'$HAL/include']

src_dir = f"{ROOT}/src/common"

all_cpp = Glob(path(src_dir)/'*.cpp')
all_c   = Glob(path(src_dir)/'*.c')
all_asm = Glob(path(src_dir)/'*.asm')
all_s = Glob(path(src_dir)/'*.s')

obj_cpp = [nmc_mc12101.Object(c) for c in all_cpp]
obj_c   = [nmc_mc12101.Object(c) for c in all_c]
obj_asm = [nmc_mc12101.Object(s, ASFLAGS = nmc_mc12101['ASFLAGS'] + ['-mmas']) for s in all_asm]
obj_s   = [nmc_mc12101.Object(s, ASFLAGS = nmc_mc12101['ASFLAGS'] + ['-mgas']) for s in all_s]
dump_list =[]
for objects in [obj_cpp, obj_s, obj_asm, obj_s]:
	for obj in objects:
		dump = nmc_mc12101.Dump(obj)
		dump_list.append(dump)
		#Alias(obj + '-dump', dump)
Alias('dump', dump_list)
Clean('dump', dump_list)


# linker
nmc_mc12101['LINK'] = 'nmc-gcc'
if legacy:
	nmc_mc12101['LIBPATH'] = ['$MC12101/lib', '$NMC_GCC_TOOLPATH/nmc4-ide/lib', '$NMPP/lib' ]
	nmc_mc12101['WHOLELIBS'] = ["-lmc12101"]
else:
	nmc_mc12101['LIBPATH'] = ['$MC12101/lib', '$NMPP/lib' ]
	#nmc_mc12101['WHOLELIBS'] = ["-lmc12101load_nm", "-lnm_io"]
	nmc_mc12101['WHOLELIBS'] = ["-lmc12101load_nm"]
nmc_mc12101['LINKCOM'] += ' -Wl,--whole-archive $WHOLELIBS -Wl,--no-whole-archive'
nmc_mc12101['LIBPATH'] += ['$HAL/lib']
nmc_mc12101['LIBS'] = ['hal-mc12101']


nmc_fixed = nmc_mc12101.Clone()
nmc_float = nmc_mc12101.Clone()

nmc_fixed['LINKSCRIPT'] = File('ldscript-fixed.ld')
nmc_float['LINKSCRIPT'] = File('ldscript-float.ld')
nmc_fixed['LINKFLAGS'] = ["-Wl,-T$LINKSCRIPT"]
nmc_float['LINKFLAGS'] = ["-Wl,-T$LINKSCRIPT"]
nmc_fixed['LIBS'] += ['nmpp-nmc4']
nmc_float['LIBS'] += ['nmpp-nmc4f']


qemu_env = nmc_fixed.Clone()

if use_gdb:
	print("stub lib is used")
	if 'MC12101_GDB' in os.environ:
		nmc_fixed['MC12101_GDB'] = os.environ['MC12101_GDB']
		nmc_float['MC12101_GDB'] = os.environ['MC12101_GDB']
		nmc_fixed['LIBPATH'] += ['$MC12101_GDB']
		nmc_float['LIBPATH'] += ['$MC12101_GDB']
		nmc_fixed['WHOLELIBS'] += [f'-lmc12101_stub_nmc4_fixed']
		nmc_float['WHOLELIBS'] += [f'-lmc12101_stub_nmc4_float']
	else:
		print("Warning: value MC12101_GDB not found")
else: 
	print("stub lib is not used")



fixed_run_list = []
float_run_list = []
qemu_run_list = []
fixed_build_list = []
float_build_list = []
qemu_build_list = []
for test in os.listdir("."):
	if os.path.isdir(test) and test != 'obj_x86':
		obj_main = nmc_mc12101.Object(str(path(test)/'main.cpp'))
		fixed_main = nmc_fixed.Program(str(path(test)/'fixed/main.abs'), [obj_main, obj_s, obj_asm, obj_cpp, obj_c])
		float_main = nmc_float.Program(str(path(test)/'float/main.abs'), [obj_main, obj_s, obj_asm, obj_cpp, obj_c])
		nmc_fixed.Depends(fixed_main, '$LINKSCRIPT')
		nmc_float.Depends(float_main, '$LINKSCRIPT')
		fixed_build_list.append(fixed_main)
		float_build_list.append(float_main)

		if legacy:
			board_fixed_run = nmc_fixed.Command(source = fixed_main, target = None, action='mc12101run $SOURCE -p -q')
			board_float_run = nmc_float.Command(source = float_main, target = None, action='mc12101run $SOURCE -q')
		else:
			board_fixed_run = nmc_fixed.Command(source = fixed_main, target = None, action='mc12101run $SOURCE -a1 -p -q')
			board_float_run = nmc_float.Command(source = float_main, target = None, action='mc12101run $SOURCE -a0 -p -q')
		Depends(board_fixed_run, fixed_main)
		Depends(board_float_run, float_main)
		fixed_run_list.append(board_fixed_run)
		float_run_list.append(board_float_run)
		Alias(test+'-run-fixed', board_fixed_run)
		Alias(test+'-run-float', board_float_run)


		qemu_target = qemu_env.Program(str(path(test)/'qemu/main.abs'), [obj_main, obj_asm])
		qemu_env.Depends(qemu_target, '$LINKSCRIPT')
		Alias(test+'-emu', qemu_target)
		qemu_build_list.append(qemu_target)

		if use_gdb:
			qemu_run = nmc_mc12101.Command(source = qemu_target, target = None, action='nmc-qemu -g 10000 $SOURCE')
		else:
			qemu_run = nmc_mc12101.Command(source = qemu_target, target = None, action='nmc-qemu $SOURCE')
		Depends(qemu_run, qemu_target)
		qemu_run_list.append(qemu_run)
		Alias(test+'-emurun', qemu_run)

board_build_list = fixed_build_list + float_build_list
board_run_list = fixed_run_list + float_run_list
Default(board_build_list)
Alias('emu', qemu_build_list)
Alias('build', board_build_list)
Alias('emubuild', qemu_build_list)
Alias('run', board_run_list)
Alias('emurun', qemu_run_list)

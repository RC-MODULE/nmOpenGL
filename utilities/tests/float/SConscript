import os
from pathlib import Path as path

ROOT = "../.."



use_gdb = int(ARGUMENTS.get('gdb', 0))
legacy = int(ARGUMENTS.get('legacy', 1))
#cross_compile = options.get('NMC_CROSS_COMPILE') or 'nmc-')

# get environment and set variables
nmc_mc12101 = Environment(tools=['g++','gnulink', 'as'])

nmc_mc12101['ENV']['PATH'] = os.environ['PATH']
NMC_GCC_TOOLPATH = os.environ['NMC_GCC_TOOLPATH']
NMPP = os.environ['NMPP']
HAL = os.environ['HAL']
ARCH = 'nmc4'
CORE = 'float'

nmc_mc12101['NMC_GCC_TOOLPATH'] = NMC_GCC_TOOLPATH
nmc_mc12101['NMPP'] = NMPP
nmc_mc12101['HAL'] = HAL
nmc_mc12101['MC12101'] = os.environ['MC12101']
nmc_mc12101['ENV']['PATH'] += "$MC12101/bin"
nmc_mc12101['ARCH'] = ARCH
nmc_mc12101['CORE'] = CORE

gcc_exec_prefix = f"/cygdrive/{NMC_GCC_TOOLPATH}/nmc4-ide/lib/gcc/".replace(":","")
gcc_exec_prefix = gcc_exec_prefix.replace("\\","/")
nmc_mc12101['ENV']['GCC_EXEC_PREFIX'] = gcc_exec_prefix
nmc_mc12101.PrependENVPath('PATH', f'{NMC_GCC_TOOLPATH}/nmc4-ide/bin')
nmc_mc12101.PrependENVPath('PATH', f'{NMC_GCC_TOOLPATH}/nmc4-ide/lib')


# assembler
#nmc_mc12101['AS'] = 'nmc-as'
#nmc_mc12101['ASFLAGS'] = ['-q', '-split_sir', f'-{ARCH}_{CORE}', '-ga']
nmc_mc12101['AS'] = 'nmc-gcc'
nmc_mc12101['ASFLAGS'] = ['-c', '-mmas', f'-m{ARCH}-{CORE}', '-g']

# compiler
nmc_mc12101['CC'] = 'nmc-gcc'
nmc_mc12101['CXX'] = 'nmc-g++'
nmc_mc12101['CCFLAGS'] = Split('-fno-builtin-printf -std=c++11 -m$ARCH-$CORE -O0 -g')
nmc_mc12101['CPPPATH'] = Split(f'$NMPP/include {ROOT}/include $MC12101/include $HAL/include' )

# linker
#whole_archives = ["-lmc12101load_nm", "-lnm_io" ]
whole_archives = ["-lmc12101"]
nmc_mc12101['WHOLELIBS'] = ["-lmc12101"]
nmc_mc12101['LINK'] = 'nmc-g++'
nmc_mc12101['LINKCOM'] += ' -Wl,--whole-archive $WHOLELIBS -Wl,--no-whole-archive'
nmc_mc12101['LIBPATH'] = ['$NMC_GCC_TOOLPATH/nmc4-ide/lib', '$NMPP/lib', '$MC12101/lib', '$HAL/lib']
nmc_mc12101['LIBS'] = ['nmpp-nmc4f', 'hal-mc12101']
nmc_mc12101['LINKSCRIPT'] = [File(f'ldscript-{CORE}.ld')]
nmc_mc12101['LINKFLAGS'] = ["-Wl,-T$LINKSCRIPT"]


qemu_env = nmc_mc12101.Clone()

if use_gdb:
	print("stub lib is used")
	nmc_mc12101['MC12101_GDB'] = os.environ['MC12101_GDB']
	nmc_mc12101['LIBPATH'] += ['$MC12101_GDB']
	nmc_mc12101['WHOLELIBS'] += [f'-lmc12101_stub_{ARCH}_{CORE}']
	#board_env['MC12101_GDB'] = os.environ['MC12101_GDB']
	#board_env['LIBPATH'] += ['$MC12101_GDB']
	#board_env['WHOLELIBS'] += ['-lmc12101_stub_nmc4_fixed']
else: 
	print("stub lib is not used")

src_dir = f"{ROOT}/src/{CORE}"

all_cpp = Glob(path(src_dir)/'*.cpp')
all_c   = Glob(path(src_dir)/'*.c')
all_asm = Glob(path(src_dir)/'*.asm')
all_s = Glob(path(src_dir)/'*.s')

obj_cpp = [nmc_mc12101.Object(c) for c in all_cpp]
obj_c   = [nmc_mc12101.Object(c) for c in all_c]
obj_asm = [nmc_mc12101.Object(s) for s in all_asm]
obj_s   = [nmc_mc12101.Object(s) for s in all_s]

board_run_list = []
qemu_run_list = []
board_build_list = []
qemu_build_list = []
for test in os.listdir("."):
	if os.path.isdir(test) and test != 'obj':
		obj_main = nmc_mc12101.Object(str(path(test)/'main.cpp'))
		target = nmc_mc12101.Program(str(path(test)/'board/main.abs'), [obj_main, str(path(src_dir)/f'{test}.o')])
		nmc_mc12101.Depends(target, '$LINKSCRIPT')
		board_build_list.append(target)

		qemu_target = qemu_env.Program(str(path(test)/'qemu/main.abs'), [obj_main, obj_asm])
		qemu_env.Depends(qemu_target, '$LINKSCRIPT')
		Alias(test+'-qemu', qemu_target)
		qemu_build_list.append(qemu_target)		

		if legacy:
			board_run = nmc_mc12101.Command(source = target, target = None, action='mc12101run $SOURCE')
		else:
			board_run = nmc_mc12101.Command(source = target, target = None, action='mc12101run $SOURCE -a0 -p')
		Depends(board_run, target)
		board_run_list.append(board_run)
		Alias(test+'-run', board_run)

		if use_gdb:
			qemu_run = nmc_mc12101.Command(source = qemu_target, target = None, action='nmc-qemu -g 10000 -floating $SOURCE')
		else:
			qemu_run = nmc_mc12101.Command(source = qemu_target, target = None, action='nmc-qemu -floating $SOURCE')
		Depends(qemu_run, qemu_target)
		qemu_run_list.append(qemu_run)
		Alias(test+'-run-qemu', qemu_run)

Default(board_build_list)
Alias('qemu', qemu_build_list)
Alias('build', board_build_list)
Alias('build-qemu', qemu_build_list)
Alias('run', board_run_list)
Alias('run-qemu', qemu_run_list)

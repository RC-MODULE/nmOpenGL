import os
from pathlib import Path as path

ROOT = "../.."


use_gdb = int(ARGUMENTS.get('gdb', 0))
legacy = int(ARGUMENTS.get('legacy', 1))
debug_lvl = int(ARGUMENTS.get('debug_lvl', 1))
#cross_compile = options.get('NMC_CROSS_COMPILE') or 'nmc-')

dump_builder = Builder(action = 'nmc-objdump -d -s -x -l $SOURCE > $TARGET', suffix = '.dump', src_suffix = '.o')

# get environment and set variables
nmc_mc12101 = Environment(tools=['g++', 'gcc','gnulink', 'as'])
nmc_mc12101['BUILDERS']['Dump'] = dump_builder
#nmc_mc12101.Clean(dump_builder)

#nmc_mc12101['ENV']['PATH'] = os.environ['PATH']
#NMC_GCC_TOOLPATH = 'd:\\download\\NMC_Mingw'
NMC_GCC_TOOLPATH = os.environ['NMC_GCC_TOOLPATH']
MC12101 = os.environ['MC12101']
NMPP = os.environ['NMPP']
HAL = os.environ['HAL']
ARCH = 'nmc4'
CORE = 'float'

nmc_mc12101['ROOT'] = ROOT
nmc_mc12101['NMC_GCC_TOOLPATH'] = NMC_GCC_TOOLPATH
nmc_mc12101['NMPP'] = NMPP
nmc_mc12101['HAL'] = HAL
nmc_mc12101['MC12101'] = MC12101
nmc_mc12101['ARCH'] = ARCH
nmc_mc12101['CORE'] = CORE

nmc_mc12101.PrependENVPath('PATH', f'{MC12101}/bin')

if nmc_mc12101['PLATFORM'] == 'win32':
	gcc_exec_prefix = f"/cygdrive/{NMC_GCC_TOOLPATH}/nmc4-ide/lib/gcc/".replace(":","")
	gcc_exec_prefix = gcc_exec_prefix.replace("\\","/")
	nmc_mc12101['ENV']['GCC_EXEC_PREFIX'] = gcc_exec_prefix
	nmc_mc12101.PrependENVPath('PATH', f'{NMC_GCC_TOOLPATH}/nmc4-ide/bin')
	nmc_mc12101.PrependENVPath('PATH', f'{NMC_GCC_TOOLPATH}/nmc4-ide/lib')	
	nmc_mc12101.PrependENVPath('PATH', f'{NMC_GCC_TOOLPATH}/nmc4-ide/bin')


# assembler
#nmc_mc12101['AS'] = 'nmc-as'
#nmc_mc12101['ASFLAGS'] = ['-q', '-split_sir', f'-{ARCH}_{CORE}', '-ga']
nmc_mc12101['AS'] = 'nmc-gcc'
nmc_mc12101['ASFLAGS'] = ['-c', f'-m{ARCH}-{CORE}', '-g' ]

# compiler
nmc_mc12101['CC'] = 'nmc-gcc'
nmc_mc12101['CXX'] = 'nmc-g++'
nmc_mc12101['CFLAGS'] = Split('-std=c99')
nmc_mc12101['CXXFLAGS'] = Split('-std=c++11')
nmc_mc12101['CCFLAGS'] = Split('-m$ARCH-$CORE -O0 -g')
nmc_mc12101['CPPPATH'] = Split(f'$MC12101/include $NMPP/include $ROOT/include' )
nmc_mc12101['CPPDEFINES'] = [f'DEBUG_LEVEL={debug_lvl}']
nmc_mc12101['CPPPATH'] += [ '$HAL/include']

src_dir = f"{ROOT}/src/{CORE}"

all_cpp = Glob(path(src_dir)/'*.cpp')
all_c   = Glob(path(src_dir)/'*.c')
all_asm = Glob(path(src_dir)/'*.asm')
all_s = Glob(path(src_dir)/'*.s')

obj_cpp = [nmc_mc12101.Object(c) for c in all_cpp]
obj_c   = [nmc_mc12101.Object(c) for c in all_c]
obj_asm = [nmc_mc12101.Object(s, ASFLAGS = nmc_mc12101['ASFLAGS'] + ['-mmas']) for s in all_asm]
obj_s   = [nmc_mc12101.Object(s, ASFLAGS = nmc_mc12101['ASFLAGS'] + ['-mgas']) for s in all_s]
dump_list =[]
for objects in [obj_cpp, obj_s, obj_asm, obj_s]:
	for obj in objects:
		dump = nmc_mc12101.Dump(obj)
		dump_list.append(dump)
		#Alias(obj + '-dump', dump)
Alias('dump', dump_list)
Clean('dump', dump_list)


# linker
nmc_mc12101['LINK'] = 'nmc-gcc'
if legacy:
	nmc_mc12101['WHOLELIBS'] = ["-lmc12101"]
	nmc_mc12101['LIBPATH'] = ['$MC12101/lib', '$NMC_GCC_TOOLPATH/nmc4-ide/lib', '$NMPP/lib' ]
else:
	#nmc_mc12101['WHOLELIBS'] = ["-lmc12101load_nm", "-lnm_io"]
	nmc_mc12101['WHOLELIBS'] = ["-lmc12101load_nm"]
	nmc_mc12101['LIBPATH'] = ['$MC12101/lib', '$NMPP/lib' ]
nmc_mc12101['LIBS'] = ['nmpp-nmc4f' ]
nmc_mc12101['LINKSCRIPT'] = [File(f'ldscript-{CORE}.ld')]
nmc_mc12101['LINKFLAGS'] = ["-Wl,-T$LINKSCRIPT"]
if 'WHOLELIBS' in nmc_mc12101:
	nmc_mc12101['LINKCOM'] += ' -Wl,--whole-archive $WHOLELIBS -Wl,--no-whole-archive'


qemu_env = nmc_mc12101.Clone()
nmc_mc12101['LIBPATH'] += ['$HAL/lib']
nmc_mc12101['LIBS'] += ['hal-mc12101']


if use_gdb:
	print("stub lib is used")
	if 'MC12101_GDB' in os.environ:
		nmc_mc12101['MC12101_GDB'] = os.environ['MC12101_GDB']
		nmc_mc12101['LIBPATH'] += ['$MC12101_GDB']
		nmc_mc12101['WHOLELIBS'] += [f'-lmc12101_stub_{ARCH}_{CORE}']
	else:
		print("Warning: value MC12101_GDB not found")
else: 
	print("stub lib is not used")


board_run_list = []
qemu_run_list = []
board_build_list = []
qemu_build_list = []
for test in os.listdir("."):
	if os.path.isdir(test) and test != 'obj':
		obj_main = nmc_mc12101.Object(Glob(path(test)/'main.c*'))
		target = nmc_mc12101.Program(str(path(test)/'board/main.abs'), [obj_main, obj_cpp, obj_c, obj_s, obj_asm])
		nmc_mc12101.Depends(target, '$LINKSCRIPT')
		Alias(test, target)
		board_build_list.append(target)

		qemu_target = qemu_env.Program(str(path(test)/'qemu/main.abs'), [obj_main, obj_cpp, obj_c, obj_s, obj_asm])
		qemu_env.Depends(qemu_target, '$LINKSCRIPT')
		Alias(test+'-emu', qemu_target)
		qemu_build_list.append(qemu_target)


		if legacy:
			board_run = nmc_mc12101.Command(source = target, target = None, action='mc12101run $SOURCE -q')
		else:
			board_run = nmc_mc12101.Command(source = target, target = None, action='mc12101run $SOURCE -a0 -p -q')
		Depends(board_run, target)
		board_run_list.append(board_run)
		Alias(test+'-run', board_run)

		if use_gdb:
			qemu_run = nmc_mc12101.Command(source = qemu_target, target = None, action='nmc-qemu -g 10000 -floating $SOURCE')
		else:
			qemu_run = nmc_mc12101.Command(source = qemu_target, target = None, action='nmc-qemu -floating $SOURCE')
		Depends(qemu_run, qemu_target)
		qemu_run_list.append(qemu_run)
		Alias(test+'-emurun', qemu_run)

Default(board_build_list)
Alias('emu', qemu_build_list)
Alias('build', board_build_list)
Alias('emubuild', qemu_build_list)
Alias('run', board_run_list)
Alias('emurun', qemu_run_list)
